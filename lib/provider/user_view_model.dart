import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:hatphi_test/data/model/user_data_model.dart';
import 'package:hatphi_test/utils/enums.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:http/http.dart' as http;

/// Part file generated by Riverpod code generator for supporting annotations.
part 'user_view_model.g.dart';

/// **UserViewModel**
/// A Riverpod state notifier responsible for fetching, filtering, and managing user data.
@riverpod
class UserViewModel extends _$UserViewModel{

  @override
  FutureOr<dynamic> build() {
    return state;
  }

  /// **API Base URL**
  /// The endpoint used to fetch user data from a remote server.
  static const String baseUrl = 'https://jsonplaceholder.typicode.com/users';

  /// **User Lists**
  /// `filteredUserList` - Stores a subset of users based on filtering criteria.
  /// `users` - Stores the complete list of users fetched from the server.
  List<UserResponseModel> filteredUserList = [];
  List<UserResponseModel> users = [];

  /// **fetchUsers()**
  /// Fetches user data from the API and updates the `users` list.
  ///
  /// - **Returns:** A list of `UserResponseModel`.
  /// - **Behavior:**
  ///   - Sets the state to `AsyncLoading` during the fetch process.
  ///   - Fetches data from the `baseUrl`.
  ///   - Parses the response JSON into a list of `UserResponseModel`.
  ///   - Updates the `users` list with parsed data.
  ///   - Throws an exception if the HTTP status code is not 200.
   Future<List<UserResponseModel>> fetchUsers() async {
     state = const AsyncLoading();
     state = await AsyncValue.guard(() async {
       final response = await http.get(Uri.parse(baseUrl));

       if (response.statusCode == 200) {
         List<dynamic> jsonData = json.decode(response.body);
         users = jsonData.map((user) => UserResponseModel.fromJson(user)).toList();
         debugPrint(users.toString());
         debugPrint(users[0].name.toString());
       } else {
         throw Exception('Failed to load users');
       }
     });
    return users;
  }

  /// **searchController**
  /// A text editing controller for managing the search input field.
  final TextEditingController searchController = TextEditingController();

  /// **filterUsersByName()**
  /// Filters a list of users by their name using the given query.
  ///
  /// - **Parameters:**
  ///   - `users`: List of `UserResponseModel` to filter.
  ///   - `query`: String used for filtering by user name.
  /// - **Returns:** A filtered list of users matching the query.
  List<UserResponseModel> filterUsersByName(List<UserResponseModel> users, String? query) {
    if (query!.isEmpty) {
      return users; // Return the full list if the query is empty.
    }
    return users.where((user) {
      return user.name!.toLowerCase().contains(query.toLowerCase());
    }).toList();
  }

  /// **filteredUsers**
  /// Holds the result of the filtered users based on the search query.
  List<UserResponseModel> filteredUsers = [];

  /// **onSearch()**
  /// Updates `filteredUsers` when a search query is entered.
  ///
  /// - **Parameters:**
  ///   - `query`: The search string used to filter users.
  /// - **Behavior:**
  ///   - Calls `filterUsersByName` to filter users based on the query.
  ///   - Updates `filteredUsers` with the results.
  void onSearch(String query) {
    filteredUsers = filterUsersByName(ref.watch(userViewModelProvider.notifier).users, query);
    debugPrint(filteredUsers.map((user) => user.name).toList().toString());
  }



}